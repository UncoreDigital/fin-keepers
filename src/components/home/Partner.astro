---
// Component script (runs on server)
---

<div
  class="flex flex-col lg:flex-row w-full max-w-[1440px] px-6 lg:px-[120px] py-[80px] gap-10 justify-center items-start relative mx-auto"
>
  <!-- Left Content -->
  <div class="flex flex-col gap-8 items-start w-full lg:w-1/2 relative z-[2]">
    <div class="flex flex-col gap-3 items-start w-full relative z-[3]">
      <h2
        class="text-[25px] sm:text-[32px] lg:text-[36px] font-bold leading-[1.3] text-[#04092a]"
      >
        Your Accounting Partner,<br class="hidden sm:block" /> Built for SMBs
      </h2>
      <p
        class="text-[16px] sm:text-[17px] lg:text-[18px] leading-[27px] text-[#5c667a]"
      >
        At FinKeepers, we're more than just accountants, we're your financial
        partners. Backed by certified CPAs, experienced bookkeepers, and
        industry-seasoned advisors, we help small and medium businesses across
        the U.S. simplify tax compliance, clean up historical finances, and plan
        for the future.
      </p>
      <p
        class="text-[16px] sm:text-[17px] lg:text-[18px] leading-[27px] text-[#5c667a]"
      >
        Whether you need a reliable CPA or a dedicated bookkeeping team,
        FinKeepers delivers expert financial guidance with a personal,
        business-first approach built for your growth and peace of mind.
      </p>
    </div>
    <a href="#" target="_blank" rel="noopener noreferrer">
      <button
        class="bg-white border border-[#ed7c00] text-[#ed7c00] text-[16px] font-semibold px-4 py-2 rounded-[8px] shadow-sm hover:bg-[#ed7c00] hover:text-white hover:cursor-pointer transition"
      >
        Talk to an Expert
      </button>
    </a>
  </div>

  <!-- Right Stats with Counter Animation -->
  <div
    class="grid grid-cols-1 sm:grid-cols-2 gap-6 w-full lg:w-1/2 relative z-[3] sm:pt-30"
    id="stats-container"
  >
    <div class="border-l-2 border-[#007164] pl-4">
      <div class="text-[32px] font-bold text-[#04092a]">
        <span class="counter" data-target="850">0</span><span
          class="text-[#ed7c00]">+</span
        >
      </div>
      <p class="text-[16px] text-[#5c667a]">Accounting firm Served</p>
    </div>
    <div class="border-l-2 border-[#007164] pl-4">
      <div class="text-[32px] font-bold text-[#04092a]">
        <span class="counter" data-target="39">0</span>
      </div>
      <p class="text-[16px] text-[#5c667a]">Offices in 5 Countries</p>
    </div>
    <div class="border-l-2 border-[#007164] pl-4">
      <div class="text-[32px] font-bold text-[#04092a]">
        <span class="counter" data-target="200">0</span>K<span
          class="text-[#ed7c00]">+</span
        >
      </div>
      <p class="text-[16px] text-[#5c667a]">Network Of Professionals</p>
    </div>
    <div class="border-l-2 border-[#007164] pl-4">
      <div class="text-[32px] font-bold text-[#04092a]">
        <span class="counter" data-target="100">0</span><span
          class="text-[#ed7c00]">+</span
        >
      </div>
      <p class="text-[16px] text-[#5c667a]">Qualification</p>
    </div>
  </div>
</div>

<script>
  // Counter animation function
  function animateCounter(element: Element) {
    const target = parseInt(element.getAttribute("data-target") || "0");
    const duration = 2000; // 2 seconds
    const start = performance.now();
    const startValue = 0;

    function updateCounter(currentTime: number) {
      const elapsed = currentTime - start;
      const progress = Math.min(elapsed / duration, 1);

      // Easing function for smooth animation
      const easeOutQuart = 1 - Math.pow(1 - progress, 4);
      const currentValue = Math.floor(
        startValue + (target - startValue) * easeOutQuart
      );

      element.textContent = currentValue.toString();

      if (progress < 1) {
        requestAnimationFrame(updateCounter);
      } else {
        element.textContent = target.toString();
      }
    }

    requestAnimationFrame(updateCounter);
  }

  // Intersection Observer for triggering animation when visible
  function initCounters() {
    const counters = document.querySelectorAll(".counter");
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (
            entry.isIntersecting &&
            !entry.target.classList.contains("animated")
          ) {
            entry.target.classList.add("animated");
            animateCounter(entry.target);
          }
        });
      },
      {
        threshold: 0.5, // Trigger when 50% of the element is visible
        rootMargin: "0px 0px -100px 0px", // Start animation a bit before element is fully visible
      }
    );

    counters.forEach((counter) => observer.observe(counter));
  }

  // Initialize on DOM content loaded
  document.addEventListener("DOMContentLoaded", initCounters);
</script>

<style>
  .counter {
    display: inline-block;
    font-variant-numeric: tabular-nums;
  }
</style>
