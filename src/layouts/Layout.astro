---
import "../styles/global.css";
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>Finkeepers</title>
    
    <!-- Curtain Opening Animation Styles -->
    <style>
      /* Curtain Animation Styles */
      .curtain-container {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 9999;
        pointer-events: none;
      }

      .curtain-container.active {
        pointer-events: all;
      }

      .button-container {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 10001;
      }

      .launch_btn {
        padding: 10px;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 20px;
        font-weight: bold;
        color: #000000;
        text-transform: uppercase;
        cursor: pointer;
        border-radius: 5px;
        transition: all 0.5s ease-in;
        width: 200px !important;
        height: 200px !important;
        background: url(/img/launch/curtain-open/ribn.png) center center no-repeat;
        border: 0;
      }

      .launch_btn:hover {
        transform: scale(1.1);
      }

      .curtain {
        position: fixed;
        top: 0;
        width: 50%;
        height: 100%;
        z-index: 10000;
        transition: all 6s ease-in-out;
        background: url(/img/launch/curtain-open/curtain-img.jpg) right top no-repeat;
        background-size: cover;
      }

      .curtain.left {
        left: 0;
      }

      .curtain.right {
        right: 0;
      }

      .curtain.open-left {
        transform: translateX(-100%);
      }

      .curtain.open-right {
        transform: translateX(100%);
      }

      .curtain-image {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
        z-index: 9998;
      }

      /* Countdown overlay */
      #countdown {
        position: fixed;
        inset: 0;
        display: none;
        align-items: center;
        justify-content: center;
        font-size: 120px;
        font-weight: bold;
        color: #fff;
        background: rgba(0,0,0,0.6);
        z-index: 10002;
        width: 100vw;
        height: 100vh;
      }

      /* Celebration canvas */
      #celebrationCanvas {
        position: fixed;
        inset: 0;
        z-index: 10003;
        display: none;
        pointer-events: none;
      }

      .curtain-container.hidden {
        display: none;
      }
    </style>
    
    <slot name="head" />
  </head>
  <body class="!overflow-x-hidden">
    <!-- Curtain Opening Animation -->
    <div id="curtainContainer" class="curtain-container active">
      <div class="button-container">
        <button id="giftBtn" class="launch_btn">Launch</button>
      </div>

      <!-- Curtains -->
      <div class="curtain left" id="leftCurtain"></div>
      <div class="curtain right" id="rightCurtain"></div>

      <!-- Image -->
      <img src="/img/launch/curtain-open/sefhome.png" alt="" class="curtain-image">

      <!-- Countdown -->
      <div id="countdown">10</div>

      <!-- Celebration canvas (fireworks + confetti) -->
      <canvas id="celebrationCanvas"></canvas>
    </div>

    <slot />

    <!-- Curtain Animation Script -->
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const btn = document.getElementById('giftBtn');
        const leftCurtain = document.getElementById('leftCurtain');
        const rightCurtain = document.getElementById('rightCurtain');
        const countdownEl = document.getElementById('countdown');
        const canvas = document.getElementById('celebrationCanvas');
        const curtainContainer = document.getElementById('curtainContainer');
        const ctx = canvas.getContext('2d');
        let particles = [];

        // Resize canvas full screen
        function resizeCanvas() {
          canvas.width = window.innerWidth;
          canvas.height = window.innerHeight;
        }
        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();

        btn.addEventListener('click', () => {
          btn.style.display = 'none';
          startCountdown(10);
        });

        function startCountdown(seconds) {
          countdownEl.style.display = 'flex';
          countdownEl.textContent = seconds;

          const interval = setInterval(() => {
            seconds--;
            countdownEl.textContent = seconds;

            if (seconds <= 0) {
              clearInterval(interval);
              countdownEl.style.display = 'none';
              openCurtains();
            }
          }, 1000);
        }

        function openCurtains() {
          leftCurtain.classList.add('open-left');
          rightCurtain.classList.add('open-right');

          setTimeout(() => {
            startCelebration();
          }, 3000);

          setTimeout(() => {
            curtainContainer.classList.add('hidden');
            curtainContainer.classList.remove('active');
          }, 8000);
        }

        class Particle {
          constructor(x, y, color, type) {
            this.x = x;
            this.y = y;
            this.color = color;
            this.type = type;
            this.radius = Math.random() * 3 + 2;
            this.alpha = 1;
            
            if (type === "firework") {
              this.vx = (Math.random() - 0.5) * 10;
              this.vy = (Math.random() - 0.5) * 10;
              this.decay = 0.015;
            } else {
              this.vx = (Math.random() - 0.5) * 4;
              this.vy = Math.random() * 2 + 1;
              this.decay = 0.005;
            }
          }
          
          update() {
            this.x += this.vx;
            this.y += this.vy;
            this.alpha -= this.decay;
            
            if (this.type === "confetti") {
              this.vy += 0.1;
              if (this.y > canvas.height) {
                this.y = -10;
                this.x = Math.random() * canvas.width;
                this.alpha = 1;
              }
            }
          }
          
          draw() {
            ctx.globalAlpha = this.alpha;
            ctx.beginPath();
            if (this.type === "confetti") {
              ctx.fillRect(this.x, this.y, this.radius, this.radius * 0.6);
            } else {
              ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
            }
            ctx.fillStyle = this.color;
            ctx.fill();
            ctx.globalAlpha = 1;
          }
        }

        function createFirework(x, y) {
          const colors = ["#ff4d6d", "#ffb86b", "#5a00ff", "#00f2ff", "#7aff7a"];
          for (let i = 0; i < 50; i++) {
            particles.push(new Particle(x, y, colors[Math.floor(Math.random() * colors.length)], "firework"));
          }
        }

        function createConfetti() {
          const colors = ["#ff4d6d", "#ffb86b", "#5a00ff", "#00f2ff", "#7aff7a"];
          for (let i = 0; i < 150; i++) {
            particles.push(new Particle(Math.random() * canvas.width, Math.random() * canvas.height, colors[Math.floor(Math.random() * colors.length)], "confetti"));
          }
        }

        function animate() {
          ctx.clearRect(0, 0, canvas.width, canvas.height);
          particles.forEach((p, i) => {
            p.update();
            p.draw();
            if (p.type === "firework" && p.alpha <= 0) particles.splice(i, 1);
          });
          requestAnimationFrame(animate);
        }

        function startCelebration() {
          canvas.style.display = "block";
          particles = [];
          createConfetti();
          animate();

          // launch fireworks bursts
          for (let i = 0; i < 5; i++) {
            setTimeout(() => {
              createFirework(
                Math.random() * canvas.width,
                Math.random() * canvas.height * 0.5
              );
            }, i * 800);
          }

          // stop celebration after 8 seconds
          setTimeout(() => {
            canvas.style.display = "none";
            particles = [];
          }, 8000);
        }
      });
    </script>
  </body>
</html>

<style>
  html,
  body {
    margin: 0;
    width: 100%;
    height: 100%;
  }

  @font-face {
    font-family: "Inter";
    src: url("/fonts/inter/Inter_18pt-Bold.ttf");
    font-weight: 700;
    font-style: bold;
  }

  @font-face {
    font-family: "Inter";
    src: url("/fonts/inter/Inter_18pt-Regular.ttf");
    font-weight: 400;
    font-style: normal;
  }

  @font-face {
    font-family: "Inter";
    src: url("/fonts/inter/Inter_18pt-SemiBold.ttf");
    font-weight: 500;
    font-style: semibold;
  }

  @font-face {
    font-family: "Poppins";
    src: url("/fonts/poppins/Poppins-Regular.ttf");
    font-weight: 400;
    font-style: normal;
  }

  @font-face {
    font-family: "Poppins";
    src: url("/fonts/poppins/Poppins-Semibold.ttf");
    font-weight: 500;
    font-style: normal;
  }

  @font-face {
    font-family: "Poppins";
    src: url("/fonts/poppins/Poppins-Medium.ttf");
    font-weight: 450;
    font-style: normal;
  }

  @font-face {
    font-family: "Poppins";
    src: url("/fonts/poppins/Poppins-Bold.ttf");
    font-weight: 700;
    font-style: normal;
  }
  /* Add more weights/styles if needed */
</style>
